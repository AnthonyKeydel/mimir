package tokendistributor

import (
	"fmt"
	"math"
	"math/rand"
	"strconv"
	"strings"
	"time"

	"golang.org/x/exp/slices"
)

type SeedGenerator interface {
	hasNextSeed(zone Zone) bool
	getNextSeed(zone Zone) ([]Token, bool)
}

type BaseSeedGenerator struct {
	seedsByZone       map[Zone][][]Token
	lastReplica       int
	replicationFactor int
}

func (g *BaseSeedGenerator) hasNextSeed(zone Zone) bool {
	_, ok := g.seedsByZone[zone]
	return ok && g.lastReplica < g.replicationFactor
}

func (g *BaseSeedGenerator) getNextSeed(zone Zone) ([]Token, bool) {
	if g.hasNextSeed(zone) {
		seed := make([]Token, 0, len(g.seedsByZone[zone][g.lastReplica]))
		seed = append(seed, g.seedsByZone[zone][g.lastReplica]...)
		g.seedsByZone[zone][g.lastReplica] = nil
		g.lastReplica = g.lastReplica + 1
		if g.lastReplica == len(g.seedsByZone[zone]) {
			delete(g.seedsByZone, zone)
			g.lastReplica = 0
		}
		return seed, true
	}
	return nil, false
}

type PerfectlySpacedSeedGenerator struct {
	*BaseSeedGenerator
}

func NewPerfectlySpacedSeedGenerator(zones []Zone, replicationFactor, tokensPerInstance int, maxTokenValue Token) *PerfectlySpacedSeedGenerator {
	tokensCount := int(math.Max(float64(len(zones)), float64(replicationFactor))) * tokensPerInstance

	allSeeds := make([]Token, 0, tokensCount)
	r := rand.New(rand.NewSource(time.Now().UnixNano()))
	offset := uint32(math.Ceil(float64(maxTokenValue) / float64(tokensCount)))
	curr := uint32(r.Intn(int(maxTokenValue)))
	for i := 0; i < tokensCount; i++ {
		allSeeds = append(allSeeds, Token(curr))
		if uint32(maxTokenValue)-offset < curr {
			curr -= uint32(maxTokenValue) - offset
		} else {
			curr += offset
		}
	}
	slices.Sort(allSeeds)
	fmt.Println(allSeeds)
	seedsByZone := distributeSortedTokensByZone(allSeeds, zones, replicationFactor, tokensPerInstance)
	return &PerfectlySpacedSeedGenerator{
		&BaseSeedGenerator{
			seedsByZone:       seedsByZone,
			lastReplica:       0,
			replicationFactor: replicationFactor,
		},
	}
}

type RandomSeedGenerator struct {
	*BaseSeedGenerator
}

func newRandomSeedGenerator(zones []Zone, replicationFactor, tokensPerInstance int, maxTokenValue Token) *RandomSeedGenerator {
	tokensCount := int(math.Max(float64(len(zones)), float64(replicationFactor))) * tokensPerInstance

	allSeeds := make([]Token, 0, tokensCount)
	r := rand.New(rand.NewSource(time.Now().UnixNano()))
	for {
		token := Token(r.Intn(int(maxTokenValue)))
		if slices.Contains(allSeeds, token) {
			continue
		}
		allSeeds = append(allSeeds, token)
		if len(allSeeds) == tokensCount {
			break
		}
	}
	slices.Sort(allSeeds)
	seedsByZone := distributeSortedTokensByZone(allSeeds, zones, replicationFactor, tokensPerInstance)
	return &RandomSeedGenerator{
		&BaseSeedGenerator{
			seedsByZone:       seedsByZone,
			lastReplica:       0,
			replicationFactor: replicationFactor,
		},
	}
}

type TestSeedGenerator struct {
	*BaseSeedGenerator
}

func newTestSeedGenerator(zones []Zone, replicationFactor, tokensPerInstance int, maxTokenValue Token) *TestSeedGenerator {
	input := "488908 3285111 6081314 8877517 11673720 14469923 17266126 20062329 22858532 25654735 28450938 31247141 34043344 36839547 39635750 42431953 45228156 48024359 50820562 53616765 56412968 59209171 62005374 64801577 67597780 70393983 73190186 75986389 78782592 81578795 84374998 87171201 89967404 92763607 95559810 98356013 101152216 103948419 106744622 109540825 112337028 115133231 117929434 120725637 123521840 126318043 129114246 131910449 134706652 137502855 140299058 143095261 145891464 148687667 151483870 154280073 157076276 159872479 162668682 165464885 168261088 171057291 173853494 176649697 179445900 182242103 185038306 187834509 190630712 193426915 196223118 199019321 201815524 204611727 207407930 210204133 213000336 215796539 218592742 221388945 224185148 226981351 229777554 232573757 235369960 238166163 240962366 243758569 246554772 249350975 252147178 254943381 257739584 260535787 263331990 266128193 268924396 271720599 274516802 277313005 280109208 282905411 285701614 288497817 291294020 294090223 296886426 299682629 302478832 305275035 308071238 310867441 313663644 316459847 319256050 322052253 324848456 327644659 330440862 333237065 336033268 338829471 341625674 344421877 347218080 350014283 352810486 355606689 358402892 361199095 363995298 366791501 369587704 372383907 375180110 377976313 380772516 383568719 386364922 389161125 391957328 394753531 397549734 400345937 403142140 405938343 408734546 411530749 414326952 417123155 419919358 422715561 425511764 428307967 431104170 433900373 436696576 439492779 442288982 445085185 447881388 450677591 453473794 456269997 459066200 461862403 464658606 467454809 470251012 473047215 475843418 478639621 481435824 484232027 487028230 489824433 492620636 495416839 498213042 501009245 503805448 506601651 509397854 512194057 514990260 517786463 520582666 523378869 526175072 528971275 531767478 534563681 537359884 540156087 542952290 545748493 548544696 551340899 554137102 556933305 559729508 562525198 565321401 568117604 570913807 573710010 576506213 579302416 582098619 584894822 587691025 590487228 593283431 596079634 598875837 601672040 604468243 607264446 610060649 612856852 615653055 618449258 621245461 624041664 626837867 629634070 632430273 635226476 638022679 640818882 643615085 646411288 649207491 652003694 654799897 657596100 660392303 663188506 665984709 668780912 671577115 674373318 677169521 679965724 682761927 685558130 688354333 691150536 693946739 696742942 699539145 702335348 705131551 707927754 710723957 713520160 716316363 719112566 721908769 724704972 727501175 730297378 733093581 735889784 738685987 741482190 744278393 747074596 749870799 752667002 755463205 758259408 761055611 763851814 766648017 769444220 772240423 775036626 777832829 780629032 783425235 786221438 789017641 791813844 794610047 797406250 800202453 802998656 805794859 808591062 811387265 814183468 816979671 819775874 822572077 825368280 828164483 830960686 833756889 836553092 839349295 842145498 844941701 847737904 850534107 853330310 856126513 858922716 861718919 864515122 867311325 870107528 872903731 875699934 878496137 881292340 884088543 886884746 889680949 892477152 895273355 898069558 900865761 903661964 906458167 909254370 912050573 914846776 917642979 920439182 923235385 926031588 928827791 931623994 934420197 937216400 940012603 942808806 945605009 948401212 951197415 953993618 956789821 959586024 962382227 965178430 967974633 970770836 973567039 976363242 979159445 981955648 984751851 987548054 990344257 993140460 995936663 998732866 1001529069 1004325272 1007121475 1009917678 1012713881 1015510084 1018306287 1021102490 1023898693 1026694896 1029491099 1032287302 1035083505 1037879708 1040675911 1043472114 1046268317 1049064520 1051860723 1054656926 1057453129 1060249332 1063045535 1065841738 1068637941 1071434144 1074230347 1077026550 1079822753 1082618956 1085415159 1088211362 1091007565 1093803768 1096599971 1099396174 1102192377 1104988580 1107784783 1110580986 1113377189 1116173392 1118969595 1121765798 1124562001 1127358204 1130154407 1132950610 1135746813 1138543016 1141339219 1144135422 1146931625 1149727828 1152524031 1155320234 1158116437 1160912640 1163708843 1166505046 1169301249 1172097452 1174893655 1177689858 1180486061 1183282264 1186078467 1188874670 1191670873 1194467076 1197263279 1200059482 1202855685 1205651888 1208448091 1211244294 1214040497 1216836700 1219632903 1222429106 1225225309 1228021512 1230817715 1233613918 1236410121 1239206324 1242002527 1244798730 1247594933 1250391136 1253187339 1255983542 1258779745 1261575948 1264372151 1267168354 1269964557 1272760760 1275556963 1278353166 1281149369 1283945572 1286741775 1289537978 1292334181 1295130384 1297926587 1300722790 1303518993 1306315196 1309111399 1311907602 1314703805 1317500008 1320296211 1323092414 1325888617 1328684820 1331481023 1334277226 1337073429 1339869632 1342665835 1345462038 1348258241 1351054444 1353850647 1356646850 1359443053 1362239256 1365035459 1367831662 1370627865 1373424068 1376220271 1379016474 1381812677 1384608880 1387405083 1390201286 1392997489 1395793692 1398589895 1401386098 1404182301 1406978504 1409774707 1412570910 1415367113 1418163316 1420959519 1423755722 1426551925 1429348128 1432144331 1434940534 1437736737 1440532940 1443329143 1446125346 1448921549 1451717752 1454513955 1457310158 1460106361 1462902564 1465698767 1468494970 1471291173 1474087376 1476883579 1479679782 1482475985 1485272188 1488068391 1490864594 1493660797 1496457000 1499253203 1502049406 1504845609 1507641812 1510438015 1513234218 1516030421 1518826624 1521622827 1524419030 1527215233 1530011436 1532807639 1535603842 1538400045 1541196248 1543992451 1546788654 1549584857 1552381060 1555177263 1557973466 1560769669 1563565872 1566362075 1569158278 1571954481 1574750684 1577546887 1580343090 1583139293 1585935496 1588731699 1591527902 1594324105 1597120308 1599916511 1602712714 1605508917 1608305120 1611101323 1613897526 1616693729 1619489932 1622286135 1625082338 1627878541 1630674744 1633470947 1636267150 1639063353 1641859556 1644655759 1647451962 1650248165 1653044368 1655840571 1658636774 1661432977 1664229180 1667025383 1669821586 1672617789 1675413992 1678210195 1681006398 1683802601 1686598804 1689395007 1692191210 1694987413 1697783616 1700579819 1703376022 1706172225 1708968428 1711764631 1714560834 1717357037 1720153240 1722949443 1725745646 1728541849 1731338052 1734134255 1736930458 1739726661 1742522864 1745319067 1748115270 1750911473 1753707676 1756503879 1759300082 1762096285 1764892488 1767688691 1770484894 1773281097 1776077300 1778873503 1781669706 1784465909 1787262112 1790058315 1792854518 1795650721 1798446924 1801243127 1804039330 1806835533 1809631736 1812427939 1815224142 1818020345 1820816548 1823612751 1826408954 1829205157 1832001360 1834797563 1837593766 1840389969 1843186172 1845982375 1848778578 1851574781 1854370984 1857167187 1859963390 1862759593 1865555796 1868351999 1871148202 1873944405 1876740608 1879536811 1882333014 1885129217 1887925420 1890721623 1893517826 1896314029 1899110232 1901906435 1904702638 1907498841 1910295044 1913091247 1915887450 1918683653 1921479856 1924276059 1927072262 1929868465 1932664668 1935460871 1938257074 1941053277 1943849480 1946645683 1949441886 1952238089 1955034292 1957830495 1960626698 1963422901 1966219104 1969015307 1971811510 1974607713 1977403916 1980200119 1982996322 1985792525 1988588728 1991384931 1994181134 1996977337 1999773540 2002569743 2005365946 2008162149 2010958352 2013754555 2016550758 2019346961 2022143164 2024939367 2027735570 2030531773 2033327976 2036124179 2038920382 2041716585 2044512788 2047308991 2050105194 2052901397 2055697600 2058493803 2061290006 2064086209 2066882412 2069678615 2072474818 2075271021 2078067224 2080863427 2083659630 2086455833 2089252036 2092048239 2094844442 2097640645 2100436848 2103233051 2106029254 2108825457 2111621660 2114417863 2117214066 2120010269 2122806472 2125602675 2128398878 2131195081 2133991284 2136787487 2139583690 2142379893 2145176096 2147972299 2150768502 2153564705 2156360908 2159157111 2161953314 2164749517 2167545720 2170341923 2173138126 2175934329 2178730532 2181526735 2184322938 2187119141 2189915344 2192711547 2195507750 2198303953 2201100156 2203896359 2206692562 2209488765 2212284968 2215081171 2217877374 2220673577 2223469780 2226265983 2229062186 2231858389 2234654592 2237450795 2240246998 2243043201 2245839404 2248635607 2251431810 2254228013 2257024216 2259820419 2262616622 2265412825 2268209028 2271005231 2273801434 2276597637 2279393840 2282190043 2284986246 2287782449 2290578652 2293374855 2296171058 2298967261 2301763464 2304559667 2307355870 2310152073 2312948276 2315744479 2318540682 2321336885 2324133088 2326929291 2329725494 2332521697 2335317900 2338114103 2340910306 2343706509 2346502712 2349298915 2352095118 2354891321 2357687524 2360483727 2363279930 2366076133 2368872336 2371668539 2374464742 2377260945 2380057148 2382853351 2385649554 2388445757 2391241960 2394038163 2396834366 2399630569 2402426772 2405222975 2408019178 2410815381 2413611584 2416407787 2419203990 2422000193 2424796396 2427592599 2430388802 2433185005 2435981208 2438777411 2441573614 2444369817 2447166020 2449962223 2452758426 2455554629 2458350832 2461147035 2463943238 2466739441 2469535644 2472331847 2475128050 2477924253 2480720456 2483516659 2486312862 2489109065 2491905268 2494701471 2497497674 2500293877 2503090080 2505886283 2508682486 2511478689 2514274892 2517071095 2519867298 2522663501 2525459704 2528255907 2531052110 2533848313 2536644516 2539440719 2542236922 2545033125 2547829328 2550625531 2553421734 2556217937 2559014140 2561810343 2564606546 2567402749 2570198952 2572995155 2575791358 2578587561 2581383764 2584179967 2586976170 2589772373 2592568576 2595364779 2598160982 2600957185 2603753388 2606549591 2609345794 2612141997 2614938200 2617734403 2620530606 2623326809 2626123012 2628919215 2631715418 2634511621 2637307824 2640104027 2642900230 2645696433 2648492636 2651288839 2654085042 2656881245 2659677448 2662473651 2665269854 2668066057 2670862260 2673658463 2676454666 2679250869 2682047072 2684843275 2687639478 2690435681 2693231884 2696028087 2698824290 2701620493 2704416696 2707212899 2710009102 2712805305 2715601508 2718397711 2721193914 2723990117 2726786320 2729582523 2732378726 2735174929 2737971132 2740767335 2743563538 2746359741 2749155944 2751952147 2754748350 2757544553 2760340756 2763136959 2765933162 2768729365 2771525568 2774321771 2777117974 2779914177 2782710380 2785506583 2788302786 2791098989 2793895192 2796691395 2799487598 2802283801 2805080004 2807876207 2810672410 2813468613 2816264816 2819061019 2821857222 2824653425 2827449628 2830245831 2833042034 2835838237 2838634440 2841430643 2844226846 2847023049 2849819252 2852615455 2855411658 2858207861 2861004064 2863800267 2866596470 2869392673 2872188876 2874985079 2877781282 2880577485 2883373688 2886169891 2888966094 2891762297 2894558500 2897354703 2900150906 2902947109 2905743312 2908539515 2911335718 2914131921 2916928124 2919724327 2922520530 2925316733 2928112936 2930909139 2933705342 2936501545 2939297748 2942093951 2944890154 2947686357 2950482560 2953278763 2956074966 2958871169 2961667372 2964463575 2967259778 2970055981 2972852184 2975648387 2978444590 2981240793 2984036996 2986833199 2989629402 2992425605 2995221808 2998018011 3000814214 3003610417 3006406620 3009202823 3011999026 3014795229 3017591432 3020387635 3023183838 3025980041 3028776244 3031572447 3034368650 3037164853 3039961056 3042757259 3045553462 3048349665 3051145868 3053942071 3056738274 3059534477 3062330680 3065126883 3067923086 3070719289 3073515492 3076311695 3079107898 3081904101 3084700304 3087496507 3090292710 3093088913 3095885116 3098681319 3101477522 3104273725 3107069928 3109866131 3112662334 3115458537 3118254740 3121050943 3123847146 3126643349 3129439552 3132235755 3135031958 3137828161 3140624364 3143420567 3146216770 3149012973 3151809176 3154605379 3157401582 3160197785 3162993988 3165790191 3168586394 3171382597 3174178800 3176975003 3179771206 3182567409 3185363612 3188159815 3190956018 3193752221 3196548424 3199344627 3202140830 3204937033 3207733236 3210529439 3213325642 3216121845 3218918048 3221714251 3224510454 3227306657 3230102860 3232899063 3235695266 3238491469 3241287672 3244083875 3246880078 3249676281 3252472484 3255268687 3258064890 3260861093 3263657296 3266453499 3269249702 3272045905 3274842108 3277638311 3280434514 3283230717 3286026920 3288823123 3291619326 3294415529 3297211732 3300007935 3302804138 3305600341 3308396544 3311192747 3313988950 3316785153 3319581356 3322377559 3325173762 3327969965 3330766168 3333562371 3336358574 3339154777 3341950980 3344747183 3347543386 3350339589 3353135792 3355931995 3358728198 3361524401 3364320604 3367116807 3369913010 3372709213 3375505416 3378301619 3381097822 3383894025 3386690228 3389486431 3392282634 3395078837 3397875040 3400671243 3403467446 3406263649 3409059852 3411856055 3414652258 3417448461 3420244664 3423040867 3425837070 3428633273 3431429476 3434225679 3437021882 3439818085 3442614288 3445410491 3448206694 3451002897 3453799100 3456595303 3459391506 3462187709 3464983912 3467780115 3470576318 3473372521 3476168724 3478964927 3481761130 3484557333 3487353536 3490149739 3492945942 3495742145 3498538348 3501334551 3504130754 3506926957 3509723160 3512519363 3515315566 3518111769 3520907972 3523704175 3526500378 3529296581 3532092784 3534888987 3537685190 3540481393 3543277596 3546073799 3548870002 3551666205 3554462408 3557258611 3560054814 3562851017 3565647220 3568443423 3571239626 3574035829 3576832032 3579628235 3582424438 3585220641 3588016844 3590813047 3593609250 3596405453 3599201656 3601997859 3604794062 3607590265 3610386468 3613182671 3615978874 3618775077 3621571280 3624367483 3627163686 3629959889 3632756092 3635552295 3638348498 3641144701 3643940904 3646737107 3649533310 3652329513 3655125716 3657921919 3660718122 3663514325 3666310528 3669106731 3671902934 3674699137 3677495340 3680291543 3683087746 3685883949 3688680152 3691476355 3694272558 3697068761 3699864964 3702661167 3705457370 3708253573 3711049776 3713845979 3716642182 3719438385 3722234588 3725030791 3727826994 3730623197 3733419400 3736215603 3739011806 3741808009 3744604212 3747400415 3750196618 3752992821 3755789024 3758585227 3761381430 3764177633 3766973836 3769770039 3772566242 3775362445 3778158648 3780954851 3783751054 3786547257 3789343460 3792139663 3794935866 3797732069 3800528272 3803324475 3806120678 3808916881 3811713084 3814509287 3817305490 3820101693 3822897896 3825694099 3828490302 3831286505 3834082708 3836878911 3839675114 3842471317 3845267520 3848063723 3850859926 3853656129 3856452332 3859248535 3862044738 3864840941 3867637144 3870433347 3873229550 3876025753 3878821956 3881618159 3884414362 3887210565 3890006768 3892802971 3895599174 3898395377 3901191580 3903987783 3906783986 3909580189 3912376392 3915172595 3917968798 3920765001 3923561204 3926357407 3929153610 3931949813 3934746016 3937542219 3940338422 3943134625 3945930828 3948727031 3951523234 3954319437 3957115640 3959911843 3962708046 3965504249 3968300452 3971096655 3973892858 3976689061 3979485264 3982281467 3985077670 3987873873 3990670076 3993466279 3996262482 3999058685 4001854888 4004651091 4007447294 4010243497 4013039700 4015835903 4018632106 4021428309 4024224512 4027020715 4029816918 4032613121 4035409324 4038205527 4041001730 4043797933 4046594136 4049390339 4052186542 4054982745 4057778948 4060575151 4063371354 4066167557 4068963760 4071759963 4074556166 4077352369 4080148572 4082944775 4085740978 4088537181 4091333384 4094129587 4096925790 4099721993 4102518196 4105314399 4108110602 4110906805 4113703008 4116499211 4119295414 4122091617 4124887820 4127684023 4130480226 4133276429 4136072632 4138868835 4141665038 4144461241 4147257444 4150053647 4152849850 4155646053 4158442256 4161238459 4164034662 4166830865 4169627068 4172423271 4175219474 4178015677 4180811880 4183608083 4186404286 4189200489 4191996692 4194792895 4197589098 4200385301 4203181504 4205977707 4208773910 4211570113 4214366316 4217162519 4219958722 4222754925 4225551128 4228347331 4231143534 4233939737 4236735940 4239532143 4242328346 4245124549 4247920752 4250716955 4253513158 4256309361 4259105564 4261901767 4264697970 4267494173 4270290376 4273086579 4275882782 4278678985 4281475188 4284271391 4287067594 4289863797 4292660000"
	strSeeds := strings.Split(input, " ")
	allSeeds := make([]Token, 0, len(strSeeds))
	for _, strSeed := range strSeeds {
		seed, err := strconv.ParseUint(strSeed, 10, 32)
		if err != nil {
			panic("Bad conversion " + strSeed)
		}
		allSeeds = append(allSeeds, Token(seed))
	}

	slices.Sort(allSeeds)
	fmt.Println(allSeeds)

	slices.Sort(allSeeds)
	seedsByZone := distributeSortedTokensByZone(allSeeds, zones, replicationFactor, tokensPerInstance)
	return &TestSeedGenerator{
		&BaseSeedGenerator{
			seedsByZone:       seedsByZone,
			lastReplica:       0,
			replicationFactor: replicationFactor,
		},
	}
}

func distributeSortedTokensByZone(allSeeds []Token, zones []Zone, replicationFactor, tokensPerInstance int) map[Zone][][]Token {
	seedByZone := make(map[Zone][][]Token, len(zones))
	if len(zones) > 1 {
		for i, token := range allSeeds {
			zone := zones[i%len(zones)]
			currSeed, ok := seedByZone[zone]
			if !ok {
				currSeed = make([][]Token, 0, 1)
				currSeed = append(currSeed, make([]Token, 0, tokensPerInstance))
			}
			currSeed[0] = append(currSeed[0], token)
			seedByZone[zone] = currSeed
		}
	} else {
		seeds := make([][]Token, 0, replicationFactor)
		for i := 0; i < replicationFactor; i++ {
			seeds = append(seeds, make([]Token, 0, tokensPerInstance))
		}
		for i, token := range allSeeds {
			seed := seeds[i%replicationFactor]
			seed = append(seed, token)
			seeds[i%replicationFactor] = seed
		}
		seedByZone[zones[0]] = seeds
	}
	return seedByZone
}
