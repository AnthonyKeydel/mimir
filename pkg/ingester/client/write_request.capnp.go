// Code generated by capnpc-go. DO NOT EDIT.

package client

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	math "math"
)

type CpnWriteRequest2 capnp.Struct

// CpnWriteRequest2_TypeID is the unique identifier for the type CpnWriteRequest2.
const CpnWriteRequest2_TypeID = 0xf48c5476a60917ea

func NewCpnWriteRequest2(s *capnp.Segment) (CpnWriteRequest2, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return CpnWriteRequest2(st), err
}

func NewRootCpnWriteRequest2(s *capnp.Segment) (CpnWriteRequest2, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return CpnWriteRequest2(st), err
}

func ReadRootCpnWriteRequest2(msg *capnp.Message) (CpnWriteRequest2, error) {
	root, err := msg.Root()
	return CpnWriteRequest2(root.Struct()), err
}

func (s CpnWriteRequest2) String() string {
	str, _ := text.Marshal(0xf48c5476a60917ea, capnp.Struct(s))
	return str
}

func (s CpnWriteRequest2) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CpnWriteRequest2) DecodeFromPtr(p capnp.Ptr) CpnWriteRequest2 {
	return CpnWriteRequest2(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CpnWriteRequest2) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CpnWriteRequest2) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CpnWriteRequest2) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CpnWriteRequest2) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CpnWriteRequest2) Timeseries() (CpnWriteRequest2_TimeSeries2_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return CpnWriteRequest2_TimeSeries2_List(p.List()), err
}

func (s CpnWriteRequest2) HasTimeseries() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CpnWriteRequest2) SetTimeseries(v CpnWriteRequest2_TimeSeries2_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewTimeseries sets the timeseries field to a newly
// allocated CpnWriteRequest2_TimeSeries2_List, preferring placement in s's segment.
func (s CpnWriteRequest2) NewTimeseries(n int32) (CpnWriteRequest2_TimeSeries2_List, error) {
	l, err := NewCpnWriteRequest2_TimeSeries2_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return CpnWriteRequest2_TimeSeries2_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s CpnWriteRequest2) Source() CpnWriteRequest2_Source {
	return CpnWriteRequest2_Source(capnp.Struct(s).Uint16(0))
}

func (s CpnWriteRequest2) SetSource(v CpnWriteRequest2_Source) {
	capnp.Struct(s).SetUint16(0, uint16(v))
}

func (s CpnWriteRequest2) Metadata() (CpnWriteRequest2_MetricMetadata2_List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return CpnWriteRequest2_MetricMetadata2_List(p.List()), err
}

func (s CpnWriteRequest2) HasMetadata() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s CpnWriteRequest2) SetMetadata(v CpnWriteRequest2_MetricMetadata2_List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewMetadata sets the metadata field to a newly
// allocated CpnWriteRequest2_MetricMetadata2_List, preferring placement in s's segment.
func (s CpnWriteRequest2) NewMetadata(n int32) (CpnWriteRequest2_MetricMetadata2_List, error) {
	l, err := NewCpnWriteRequest2_MetricMetadata2_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return CpnWriteRequest2_MetricMetadata2_List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s CpnWriteRequest2) SkipLabelNameValidation() bool {
	return capnp.Struct(s).Bit(16)
}

func (s CpnWriteRequest2) SetSkipLabelNameValidation(v bool) {
	capnp.Struct(s).SetBit(16, v)
}

// CpnWriteRequest2_List is a list of CpnWriteRequest2.
type CpnWriteRequest2_List = capnp.StructList[CpnWriteRequest2]

// NewCpnWriteRequest2 creates a new list of CpnWriteRequest2.
func NewCpnWriteRequest2_List(s *capnp.Segment, sz int32) (CpnWriteRequest2_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[CpnWriteRequest2](l), err
}

// CpnWriteRequest2_Future is a wrapper for a CpnWriteRequest2 promised by a client call.
type CpnWriteRequest2_Future struct{ *capnp.Future }

func (f CpnWriteRequest2_Future) Struct() (CpnWriteRequest2, error) {
	p, err := f.Future.Ptr()
	return CpnWriteRequest2(p.Struct()), err
}

type CpnWriteRequest2_Source uint16

// CpnWriteRequest2_Source_TypeID is the unique identifier for the type CpnWriteRequest2_Source.
const CpnWriteRequest2_Source_TypeID = 0xf9e71e6579ef2e82

// Values of CpnWriteRequest2_Source.
const (
	CpnWriteRequest2_Source_api  CpnWriteRequest2_Source = 0
	CpnWriteRequest2_Source_rule CpnWriteRequest2_Source = 1
)

// String returns the enum's constant name.
func (c CpnWriteRequest2_Source) String() string {
	switch c {
	case CpnWriteRequest2_Source_api:
		return "api"
	case CpnWriteRequest2_Source_rule:
		return "rule"

	default:
		return ""
	}
}

// CpnWriteRequest2_SourceFromString returns the enum value with a name,
// or the zero value if there's no such value.
func CpnWriteRequest2_SourceFromString(c string) CpnWriteRequest2_Source {
	switch c {
	case "api":
		return CpnWriteRequest2_Source_api
	case "rule":
		return CpnWriteRequest2_Source_rule

	default:
		return 0
	}
}

type CpnWriteRequest2_Source_List = capnp.EnumList[CpnWriteRequest2_Source]

func NewCpnWriteRequest2_Source_List(s *capnp.Segment, sz int32) (CpnWriteRequest2_Source_List, error) {
	return capnp.NewEnumList[CpnWriteRequest2_Source](s, sz)
}

type CpnWriteRequest2_TimeSeries2 capnp.Struct

// CpnWriteRequest2_TimeSeries2_TypeID is the unique identifier for the type CpnWriteRequest2_TimeSeries2.
const CpnWriteRequest2_TimeSeries2_TypeID = 0xf3a38db41fe1776e

func NewCpnWriteRequest2_TimeSeries2(s *capnp.Segment) (CpnWriteRequest2_TimeSeries2, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return CpnWriteRequest2_TimeSeries2(st), err
}

func NewRootCpnWriteRequest2_TimeSeries2(s *capnp.Segment) (CpnWriteRequest2_TimeSeries2, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return CpnWriteRequest2_TimeSeries2(st), err
}

func ReadRootCpnWriteRequest2_TimeSeries2(msg *capnp.Message) (CpnWriteRequest2_TimeSeries2, error) {
	root, err := msg.Root()
	return CpnWriteRequest2_TimeSeries2(root.Struct()), err
}

func (s CpnWriteRequest2_TimeSeries2) String() string {
	str, _ := text.Marshal(0xf3a38db41fe1776e, capnp.Struct(s))
	return str
}

func (s CpnWriteRequest2_TimeSeries2) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CpnWriteRequest2_TimeSeries2) DecodeFromPtr(p capnp.Ptr) CpnWriteRequest2_TimeSeries2 {
	return CpnWriteRequest2_TimeSeries2(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CpnWriteRequest2_TimeSeries2) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CpnWriteRequest2_TimeSeries2) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CpnWriteRequest2_TimeSeries2) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CpnWriteRequest2_TimeSeries2) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CpnWriteRequest2_TimeSeries2) Labels() (CpnWriteRequest2_TimeSeries2_LabelPair2_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return CpnWriteRequest2_TimeSeries2_LabelPair2_List(p.List()), err
}

func (s CpnWriteRequest2_TimeSeries2) HasLabels() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CpnWriteRequest2_TimeSeries2) SetLabels(v CpnWriteRequest2_TimeSeries2_LabelPair2_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewLabels sets the labels field to a newly
// allocated CpnWriteRequest2_TimeSeries2_LabelPair2_List, preferring placement in s's segment.
func (s CpnWriteRequest2_TimeSeries2) NewLabels(n int32) (CpnWriteRequest2_TimeSeries2_LabelPair2_List, error) {
	l, err := NewCpnWriteRequest2_TimeSeries2_LabelPair2_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return CpnWriteRequest2_TimeSeries2_LabelPair2_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s CpnWriteRequest2_TimeSeries2) Samples() (CpnWriteRequest2_TimeSeries2_Sample2_List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return CpnWriteRequest2_TimeSeries2_Sample2_List(p.List()), err
}

func (s CpnWriteRequest2_TimeSeries2) HasSamples() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s CpnWriteRequest2_TimeSeries2) SetSamples(v CpnWriteRequest2_TimeSeries2_Sample2_List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewSamples sets the samples field to a newly
// allocated CpnWriteRequest2_TimeSeries2_Sample2_List, preferring placement in s's segment.
func (s CpnWriteRequest2_TimeSeries2) NewSamples(n int32) (CpnWriteRequest2_TimeSeries2_Sample2_List, error) {
	l, err := NewCpnWriteRequest2_TimeSeries2_Sample2_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return CpnWriteRequest2_TimeSeries2_Sample2_List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}

// CpnWriteRequest2_TimeSeries2_List is a list of CpnWriteRequest2_TimeSeries2.
type CpnWriteRequest2_TimeSeries2_List = capnp.StructList[CpnWriteRequest2_TimeSeries2]

// NewCpnWriteRequest2_TimeSeries2 creates a new list of CpnWriteRequest2_TimeSeries2.
func NewCpnWriteRequest2_TimeSeries2_List(s *capnp.Segment, sz int32) (CpnWriteRequest2_TimeSeries2_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[CpnWriteRequest2_TimeSeries2](l), err
}

// CpnWriteRequest2_TimeSeries2_Future is a wrapper for a CpnWriteRequest2_TimeSeries2 promised by a client call.
type CpnWriteRequest2_TimeSeries2_Future struct{ *capnp.Future }

func (f CpnWriteRequest2_TimeSeries2_Future) Struct() (CpnWriteRequest2_TimeSeries2, error) {
	p, err := f.Future.Ptr()
	return CpnWriteRequest2_TimeSeries2(p.Struct()), err
}

type CpnWriteRequest2_TimeSeries2_LabelPair2 capnp.Struct

// CpnWriteRequest2_TimeSeries2_LabelPair2_TypeID is the unique identifier for the type CpnWriteRequest2_TimeSeries2_LabelPair2.
const CpnWriteRequest2_TimeSeries2_LabelPair2_TypeID = 0xf411009120da9dee

func NewCpnWriteRequest2_TimeSeries2_LabelPair2(s *capnp.Segment) (CpnWriteRequest2_TimeSeries2_LabelPair2, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return CpnWriteRequest2_TimeSeries2_LabelPair2(st), err
}

func NewRootCpnWriteRequest2_TimeSeries2_LabelPair2(s *capnp.Segment) (CpnWriteRequest2_TimeSeries2_LabelPair2, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return CpnWriteRequest2_TimeSeries2_LabelPair2(st), err
}

func ReadRootCpnWriteRequest2_TimeSeries2_LabelPair2(msg *capnp.Message) (CpnWriteRequest2_TimeSeries2_LabelPair2, error) {
	root, err := msg.Root()
	return CpnWriteRequest2_TimeSeries2_LabelPair2(root.Struct()), err
}

func (s CpnWriteRequest2_TimeSeries2_LabelPair2) String() string {
	str, _ := text.Marshal(0xf411009120da9dee, capnp.Struct(s))
	return str
}

func (s CpnWriteRequest2_TimeSeries2_LabelPair2) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CpnWriteRequest2_TimeSeries2_LabelPair2) DecodeFromPtr(p capnp.Ptr) CpnWriteRequest2_TimeSeries2_LabelPair2 {
	return CpnWriteRequest2_TimeSeries2_LabelPair2(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CpnWriteRequest2_TimeSeries2_LabelPair2) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CpnWriteRequest2_TimeSeries2_LabelPair2) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CpnWriteRequest2_TimeSeries2_LabelPair2) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CpnWriteRequest2_TimeSeries2_LabelPair2) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CpnWriteRequest2_TimeSeries2_LabelPair2) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s CpnWriteRequest2_TimeSeries2_LabelPair2) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CpnWriteRequest2_TimeSeries2_LabelPair2) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s CpnWriteRequest2_TimeSeries2_LabelPair2) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s CpnWriteRequest2_TimeSeries2_LabelPair2) Value() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s CpnWriteRequest2_TimeSeries2_LabelPair2) HasValue() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s CpnWriteRequest2_TimeSeries2_LabelPair2) ValueBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s CpnWriteRequest2_TimeSeries2_LabelPair2) SetValue(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// CpnWriteRequest2_TimeSeries2_LabelPair2_List is a list of CpnWriteRequest2_TimeSeries2_LabelPair2.
type CpnWriteRequest2_TimeSeries2_LabelPair2_List = capnp.StructList[CpnWriteRequest2_TimeSeries2_LabelPair2]

// NewCpnWriteRequest2_TimeSeries2_LabelPair2 creates a new list of CpnWriteRequest2_TimeSeries2_LabelPair2.
func NewCpnWriteRequest2_TimeSeries2_LabelPair2_List(s *capnp.Segment, sz int32) (CpnWriteRequest2_TimeSeries2_LabelPair2_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[CpnWriteRequest2_TimeSeries2_LabelPair2](l), err
}

// CpnWriteRequest2_TimeSeries2_LabelPair2_Future is a wrapper for a CpnWriteRequest2_TimeSeries2_LabelPair2 promised by a client call.
type CpnWriteRequest2_TimeSeries2_LabelPair2_Future struct{ *capnp.Future }

func (f CpnWriteRequest2_TimeSeries2_LabelPair2_Future) Struct() (CpnWriteRequest2_TimeSeries2_LabelPair2, error) {
	p, err := f.Future.Ptr()
	return CpnWriteRequest2_TimeSeries2_LabelPair2(p.Struct()), err
}

type CpnWriteRequest2_TimeSeries2_Sample2 capnp.Struct

// CpnWriteRequest2_TimeSeries2_Sample2_TypeID is the unique identifier for the type CpnWriteRequest2_TimeSeries2_Sample2.
const CpnWriteRequest2_TimeSeries2_Sample2_TypeID = 0x93fe8bb8dc1f1765

func NewCpnWriteRequest2_TimeSeries2_Sample2(s *capnp.Segment) (CpnWriteRequest2_TimeSeries2_Sample2, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return CpnWriteRequest2_TimeSeries2_Sample2(st), err
}

func NewRootCpnWriteRequest2_TimeSeries2_Sample2(s *capnp.Segment) (CpnWriteRequest2_TimeSeries2_Sample2, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return CpnWriteRequest2_TimeSeries2_Sample2(st), err
}

func ReadRootCpnWriteRequest2_TimeSeries2_Sample2(msg *capnp.Message) (CpnWriteRequest2_TimeSeries2_Sample2, error) {
	root, err := msg.Root()
	return CpnWriteRequest2_TimeSeries2_Sample2(root.Struct()), err
}

func (s CpnWriteRequest2_TimeSeries2_Sample2) String() string {
	str, _ := text.Marshal(0x93fe8bb8dc1f1765, capnp.Struct(s))
	return str
}

func (s CpnWriteRequest2_TimeSeries2_Sample2) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CpnWriteRequest2_TimeSeries2_Sample2) DecodeFromPtr(p capnp.Ptr) CpnWriteRequest2_TimeSeries2_Sample2 {
	return CpnWriteRequest2_TimeSeries2_Sample2(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CpnWriteRequest2_TimeSeries2_Sample2) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CpnWriteRequest2_TimeSeries2_Sample2) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CpnWriteRequest2_TimeSeries2_Sample2) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CpnWriteRequest2_TimeSeries2_Sample2) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CpnWriteRequest2_TimeSeries2_Sample2) TimestampMs() int64 {
	return int64(capnp.Struct(s).Uint64(0))
}

func (s CpnWriteRequest2_TimeSeries2_Sample2) SetTimestampMs(v int64) {
	capnp.Struct(s).SetUint64(0, uint64(v))
}

func (s CpnWriteRequest2_TimeSeries2_Sample2) Value() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s CpnWriteRequest2_TimeSeries2_Sample2) SetValue(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

// CpnWriteRequest2_TimeSeries2_Sample2_List is a list of CpnWriteRequest2_TimeSeries2_Sample2.
type CpnWriteRequest2_TimeSeries2_Sample2_List = capnp.StructList[CpnWriteRequest2_TimeSeries2_Sample2]

// NewCpnWriteRequest2_TimeSeries2_Sample2 creates a new list of CpnWriteRequest2_TimeSeries2_Sample2.
func NewCpnWriteRequest2_TimeSeries2_Sample2_List(s *capnp.Segment, sz int32) (CpnWriteRequest2_TimeSeries2_Sample2_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[CpnWriteRequest2_TimeSeries2_Sample2](l), err
}

// CpnWriteRequest2_TimeSeries2_Sample2_Future is a wrapper for a CpnWriteRequest2_TimeSeries2_Sample2 promised by a client call.
type CpnWriteRequest2_TimeSeries2_Sample2_Future struct{ *capnp.Future }

func (f CpnWriteRequest2_TimeSeries2_Sample2_Future) Struct() (CpnWriteRequest2_TimeSeries2_Sample2, error) {
	p, err := f.Future.Ptr()
	return CpnWriteRequest2_TimeSeries2_Sample2(p.Struct()), err
}

type CpnWriteRequest2_MetricMetadata2 capnp.Struct

// CpnWriteRequest2_MetricMetadata2_TypeID is the unique identifier for the type CpnWriteRequest2_MetricMetadata2.
const CpnWriteRequest2_MetricMetadata2_TypeID = 0xe6b3b2e27104cb9c

func NewCpnWriteRequest2_MetricMetadata2(s *capnp.Segment) (CpnWriteRequest2_MetricMetadata2, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return CpnWriteRequest2_MetricMetadata2(st), err
}

func NewRootCpnWriteRequest2_MetricMetadata2(s *capnp.Segment) (CpnWriteRequest2_MetricMetadata2, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return CpnWriteRequest2_MetricMetadata2(st), err
}

func ReadRootCpnWriteRequest2_MetricMetadata2(msg *capnp.Message) (CpnWriteRequest2_MetricMetadata2, error) {
	root, err := msg.Root()
	return CpnWriteRequest2_MetricMetadata2(root.Struct()), err
}

func (s CpnWriteRequest2_MetricMetadata2) String() string {
	str, _ := text.Marshal(0xe6b3b2e27104cb9c, capnp.Struct(s))
	return str
}

func (s CpnWriteRequest2_MetricMetadata2) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CpnWriteRequest2_MetricMetadata2) DecodeFromPtr(p capnp.Ptr) CpnWriteRequest2_MetricMetadata2 {
	return CpnWriteRequest2_MetricMetadata2(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CpnWriteRequest2_MetricMetadata2) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CpnWriteRequest2_MetricMetadata2) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CpnWriteRequest2_MetricMetadata2) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CpnWriteRequest2_MetricMetadata2) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CpnWriteRequest2_MetricMetadata2) Type() CpnWriteRequest2_MetricMetadata2_MetricType2 {
	return CpnWriteRequest2_MetricMetadata2_MetricType2(capnp.Struct(s).Uint16(0))
}

func (s CpnWriteRequest2_MetricMetadata2) SetType(v CpnWriteRequest2_MetricMetadata2_MetricType2) {
	capnp.Struct(s).SetUint16(0, uint16(v))
}

func (s CpnWriteRequest2_MetricMetadata2) MetricFamilyName() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s CpnWriteRequest2_MetricMetadata2) HasMetricFamilyName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CpnWriteRequest2_MetricMetadata2) MetricFamilyNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s CpnWriteRequest2_MetricMetadata2) SetMetricFamilyName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s CpnWriteRequest2_MetricMetadata2) Help() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s CpnWriteRequest2_MetricMetadata2) HasHelp() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s CpnWriteRequest2_MetricMetadata2) HelpBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s CpnWriteRequest2_MetricMetadata2) SetHelp(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s CpnWriteRequest2_MetricMetadata2) Unit() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s CpnWriteRequest2_MetricMetadata2) HasUnit() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s CpnWriteRequest2_MetricMetadata2) UnitBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s CpnWriteRequest2_MetricMetadata2) SetUnit(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

// CpnWriteRequest2_MetricMetadata2_List is a list of CpnWriteRequest2_MetricMetadata2.
type CpnWriteRequest2_MetricMetadata2_List = capnp.StructList[CpnWriteRequest2_MetricMetadata2]

// NewCpnWriteRequest2_MetricMetadata2 creates a new list of CpnWriteRequest2_MetricMetadata2.
func NewCpnWriteRequest2_MetricMetadata2_List(s *capnp.Segment, sz int32) (CpnWriteRequest2_MetricMetadata2_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return capnp.StructList[CpnWriteRequest2_MetricMetadata2](l), err
}

// CpnWriteRequest2_MetricMetadata2_Future is a wrapper for a CpnWriteRequest2_MetricMetadata2 promised by a client call.
type CpnWriteRequest2_MetricMetadata2_Future struct{ *capnp.Future }

func (f CpnWriteRequest2_MetricMetadata2_Future) Struct() (CpnWriteRequest2_MetricMetadata2, error) {
	p, err := f.Future.Ptr()
	return CpnWriteRequest2_MetricMetadata2(p.Struct()), err
}

type CpnWriteRequest2_MetricMetadata2_MetricType2 uint16

// CpnWriteRequest2_MetricMetadata2_MetricType2_TypeID is the unique identifier for the type CpnWriteRequest2_MetricMetadata2_MetricType2.
const CpnWriteRequest2_MetricMetadata2_MetricType2_TypeID = 0x90aba6cbb2ce4069

// Values of CpnWriteRequest2_MetricMetadata2_MetricType2.
const (
	CpnWriteRequest2_MetricMetadata2_MetricType2_unknown        CpnWriteRequest2_MetricMetadata2_MetricType2 = 0
	CpnWriteRequest2_MetricMetadata2_MetricType2_counter        CpnWriteRequest2_MetricMetadata2_MetricType2 = 1
	CpnWriteRequest2_MetricMetadata2_MetricType2_gauge          CpnWriteRequest2_MetricMetadata2_MetricType2 = 2
	CpnWriteRequest2_MetricMetadata2_MetricType2_histogram      CpnWriteRequest2_MetricMetadata2_MetricType2 = 3
	CpnWriteRequest2_MetricMetadata2_MetricType2_gaugehistogram CpnWriteRequest2_MetricMetadata2_MetricType2 = 4
	CpnWriteRequest2_MetricMetadata2_MetricType2_summary        CpnWriteRequest2_MetricMetadata2_MetricType2 = 5
	CpnWriteRequest2_MetricMetadata2_MetricType2_info           CpnWriteRequest2_MetricMetadata2_MetricType2 = 6
	CpnWriteRequest2_MetricMetadata2_MetricType2_stateset       CpnWriteRequest2_MetricMetadata2_MetricType2 = 7
)

// String returns the enum's constant name.
func (c CpnWriteRequest2_MetricMetadata2_MetricType2) String() string {
	switch c {
	case CpnWriteRequest2_MetricMetadata2_MetricType2_unknown:
		return "unknown"
	case CpnWriteRequest2_MetricMetadata2_MetricType2_counter:
		return "counter"
	case CpnWriteRequest2_MetricMetadata2_MetricType2_gauge:
		return "gauge"
	case CpnWriteRequest2_MetricMetadata2_MetricType2_histogram:
		return "histogram"
	case CpnWriteRequest2_MetricMetadata2_MetricType2_gaugehistogram:
		return "gaugehistogram"
	case CpnWriteRequest2_MetricMetadata2_MetricType2_summary:
		return "summary"
	case CpnWriteRequest2_MetricMetadata2_MetricType2_info:
		return "info"
	case CpnWriteRequest2_MetricMetadata2_MetricType2_stateset:
		return "stateset"

	default:
		return ""
	}
}

// CpnWriteRequest2_MetricMetadata2_MetricType2FromString returns the enum value with a name,
// or the zero value if there's no such value.
func CpnWriteRequest2_MetricMetadata2_MetricType2FromString(c string) CpnWriteRequest2_MetricMetadata2_MetricType2 {
	switch c {
	case "unknown":
		return CpnWriteRequest2_MetricMetadata2_MetricType2_unknown
	case "counter":
		return CpnWriteRequest2_MetricMetadata2_MetricType2_counter
	case "gauge":
		return CpnWriteRequest2_MetricMetadata2_MetricType2_gauge
	case "histogram":
		return CpnWriteRequest2_MetricMetadata2_MetricType2_histogram
	case "gaugehistogram":
		return CpnWriteRequest2_MetricMetadata2_MetricType2_gaugehistogram
	case "summary":
		return CpnWriteRequest2_MetricMetadata2_MetricType2_summary
	case "info":
		return CpnWriteRequest2_MetricMetadata2_MetricType2_info
	case "stateset":
		return CpnWriteRequest2_MetricMetadata2_MetricType2_stateset

	default:
		return 0
	}
}

type CpnWriteRequest2_MetricMetadata2_MetricType2_List = capnp.EnumList[CpnWriteRequest2_MetricMetadata2_MetricType2]

func NewCpnWriteRequest2_MetricMetadata2_MetricType2_List(s *capnp.Segment, sz int32) (CpnWriteRequest2_MetricMetadata2_MetricType2_List, error) {
	return capnp.NewEnumList[CpnWriteRequest2_MetricMetadata2_MetricType2](s, sz)
}

const schema_c41513495eab566b = "x\xda\xa4UOh\x1d\xd5\x17\xfe\xce\xbd\xf3\xdeKh" +
	"\xf2\x9b\\&?\xb2\xd2\x14QlC\x9b4\x13\xa1M" +
	"\xa0$F*$\x18\xc9mB\xc5\"\xeaMzM\xc6" +
	"\xcc\xcc\x9b\xcc\x9f\xc6'-\xb1\x017\xfe\x01E\x84." +
	"t!J\x17vW]\xb8U\x14\xc1\xa2\xeeE\x90\xba" +
	"\xb0 \xa8\x88u\xd1\x8d#w^&3dW\xb3z" +
	"\xdc3\xe7\x9e\xf3}\xf7\xfb\xcey'\xee\xd2\x8c5\xde" +
	"\xff=\x07\x93\xc7\x1a\xcd\xdc\x9b\xf9\xee\xc6\xcdk\xd7\xdf" +
	"\x82\x98c\xf9{7\xad\xcd\x9fo|\xf2\x0b@\x13\xdf" +
	"\xd2\xc7\xcc\xf9\x9bZ\x80\xf3'}\x0d\xca\xf5\xd0\xf0\x8f" +
	"\x9f\xbd\xfe\xcf;\x90g\x88\xe5\xe1\xd6\xad\xe1O\xdf\xfc" +
	"\xf0/X-`B\xb1\x17\x99\xf3*3\xc9W\xd8\x16" +
	"\xa8\xaa$'\x89\xf2_\x87z\xaf]\\~\xe3\x0e\x1a" +
	"\xdcd\xdfb\xf3\xcci\xf0!\xc0\x11\xfc6\xa8*&" +
	"&\xeb\xc9\xa6\xde\xc4o|\x849\xfd\xd6\xc3\x80\xf3\x90" +
	"\xb5\x05\xfa\xe9\xf7\xf7\x7f8\xfc\xb6\xb8#\xce\xd4\xeeu" +
	"S?\xb0v\x98\xf3\x95\x01\xe4|nR\xabR\xf2\x08" +
	"Q\xbeq\xee\xfa\xb3s\xce\xff\xbf\xdc\xcd\xbe\xaf\xf1\x0d" +
	"9\x93\x8d\x93\x80\xa3\x1a\x06\xc5\xce\xe8\x1f\x1d}\xff\xed" +
	"\xbb\x10\x93\xac\xba\x0a\x9a\xd0M\xc6\x9c+MS\xf7r" +
	"\xf3$\x8e\xe7\xd1\xc6\xda\x98\x17\xae\xe9\xde$\xd5\xf1\xd8" +
	"\xaa\xef\xe90\x1d\xdb\x8a\xbdT?\x17\xeb\xcdL'\xe9" +
	"\xe8\xaa\x8a\xc2h\xea\xb1(|\xca\x84\xcfv\xa3\xee\xe8" +
	"\x82NcouA\xa7\xea\x82JUy^\xb6;\x91" +
	"v\x17\x89\xe4ab\x80xz\x16 \x12\xd2\xfc01" +
	"\xe7\x02\xc4\xc5\xa3g\x01\xb2\xc4\xe9\x97\x01j\x88I\xf3" +
	"\xad)\xc6G\x00j\x89\xa3\xf3\xc0v\x16n\x84\xed\xad" +
	"p{\xb5\x9d\x85\xa9\x8e\x87\xd7T\xb6\xa6\xf3u/I" +
	"\xdbk\xb1\x02\x05y\x11Y\xf7\x12L\x17\xa1`;\xc9" +
	"\x82@\xc5\x1d\xdb\x0b_h\xe7I\xaaR\x9d\xe8\x14\xc0" +
	"\x1e\xc3\x9e{f\xb8\xec\x05zI\xc7\x9eN\xdc\xd1%" +
	"\x15\xd8\x91\xdfe\xd6\xc3-\xc0\"@\x1c]\x01\xe4\x11" +
	"N\xf2\x11F\x82h\x90Lp\xdc\x05\xe41N\xf2\x14" +
	"\xa3<\xf5\x02\x9d\xa4*@+ZH\xa8\x01F\x0d\xd0" +
	"\xf0E\xe5g\x9a\x0e\x81\xd1!\xd0\x01\x10\xee\xd3\x00\x90" +
	"\x16Qm\x10h%\xdf\x95\xa5\x83V\xa4]9\xb0\x07" +
	"]\x8d\x00\xf2\x19Nr\x9dQ\x89\\\xbf\x06\xc8uN" +
	"2e$\x18\x0d\x16\x0an\x9aD\x9f\x93|\x89\x91\xe0" +
	"l\x908 2\x13\x8c8\xc9K\x8c\xec\xb4\x13i\xb2" +
	"\xab\xb6 \xb2AyPt~\\Q\xe0\xf9\x9d'U" +
	"\xa0\x01\xea\x03\xa3>\x90\xbd\xae\xfdh\xef\x90\x85^Z" +
	"\x1e\xf6\x1e\xa3\xf5_\xe5\xb2\x8d^\xb2\x87\xaa\xf1\xea=" +
	"_M\xbc\xe8\x9d\xcd\x9fP+\xda_T\x1ex\xecn" +
	"/\xa9\xc0\xe8Z\x17u\x0a\x90\x0fr\x9235QO" +
	"\xcf\x02\xf2\x14'\xb9\xcch\xda7\x05\x12\xfa\x1fh\x91" +
	"\x13\x0d\x94\x8d@&\xb4\x9d\x14\x15\xab\xcfU\xf3n\xc2" +
	"\x01f\xae\xee\xc8\x92E\xecb\x9f)Gv\xf1\x9f\xa8" +
	"\xe1?\xeeVN\xb5C\x15\xe8\xf2\xc1w\xbd\xb8\xff\xf9" +
	"\x9b\xf7\x8a\x0d\x90}T\xdf<b\xaa\xb6\x0c\xfbW\xaa" +
	"=*\xfaw\xa6\x97\xdaY\xbc\xaa\xf3\x92\x0fZ:q" +
	"\xf3\xd2\xcdT\xda\xb9n\xd7\xf3\x80|\xbek\xb8\x92S" +
	"\xc7\x08\x95r\x92\xaf\xd4\xeczy\x1e\x90\x978\xc9\xab" +
	"\xc6\xae\x03]\xbb\xbe\xfb\x05 \xafr\x92\x1f\x95#i" +
	"\x9a\xf2\xbaH{X\xbb\"M'\x05B\xb2+F\x95" +
	"\xad\x0bx\x00\xaa\xdb\xb5\xbf\x9bB\xe2d\xc3\x8b\x8c@" +
	"\xcc7\xc6?\xa7|\xef\x82J\xbdv\x08\"0\xa2\x03" +
	"\xf9\xbc\xfbv]\xd1\x0b\xca\xe2\x81b\xc7\xf6\x8e\x00-" +
	"\x15yv\x9c\xf9\xfa\xdf\x00\x00\x00\xff\xff\xf7J\x11\xd3"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_c41513495eab566b,
		Nodes: []uint64{
			0x90aba6cbb2ce4069,
			0x93fe8bb8dc1f1765,
			0xe6b3b2e27104cb9c,
			0xf3a38db41fe1776e,
			0xf411009120da9dee,
			0xf48c5476a60917ea,
			0xf9e71e6579ef2e82,
		},
		Compressed: true,
	})
}
