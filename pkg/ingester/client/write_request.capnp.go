// Code generated by capnpc-go. DO NOT EDIT.

package client

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	math "math"
)

type CpnWriteRequest2 capnp.Struct

// CpnWriteRequest2_TypeID is the unique identifier for the type CpnWriteRequest2.
const CpnWriteRequest2_TypeID = 0xf48c5476a60917ea

func NewCpnWriteRequest2(s *capnp.Segment) (CpnWriteRequest2, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return CpnWriteRequest2(st), err
}

func NewRootCpnWriteRequest2(s *capnp.Segment) (CpnWriteRequest2, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return CpnWriteRequest2(st), err
}

func ReadRootCpnWriteRequest2(msg *capnp.Message) (CpnWriteRequest2, error) {
	root, err := msg.Root()
	return CpnWriteRequest2(root.Struct()), err
}

func (s CpnWriteRequest2) String() string {
	str, _ := text.Marshal(0xf48c5476a60917ea, capnp.Struct(s))
	return str
}

func (s CpnWriteRequest2) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CpnWriteRequest2) DecodeFromPtr(p capnp.Ptr) CpnWriteRequest2 {
	return CpnWriteRequest2(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CpnWriteRequest2) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CpnWriteRequest2) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CpnWriteRequest2) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CpnWriteRequest2) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CpnWriteRequest2) Timeseries() (CpnWriteRequest2_TimeSeries2_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return CpnWriteRequest2_TimeSeries2_List(p.List()), err
}

func (s CpnWriteRequest2) HasTimeseries() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CpnWriteRequest2) SetTimeseries(v CpnWriteRequest2_TimeSeries2_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewTimeseries sets the timeseries field to a newly
// allocated CpnWriteRequest2_TimeSeries2_List, preferring placement in s's segment.
func (s CpnWriteRequest2) NewTimeseries(n int32) (CpnWriteRequest2_TimeSeries2_List, error) {
	l, err := NewCpnWriteRequest2_TimeSeries2_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return CpnWriteRequest2_TimeSeries2_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s CpnWriteRequest2) Source() CpnWriteRequest2_Source {
	return CpnWriteRequest2_Source(capnp.Struct(s).Uint16(0))
}

func (s CpnWriteRequest2) SetSource(v CpnWriteRequest2_Source) {
	capnp.Struct(s).SetUint16(0, uint16(v))
}

func (s CpnWriteRequest2) Metadata() (CpnWriteRequest2_MetricMetadata2_List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return CpnWriteRequest2_MetricMetadata2_List(p.List()), err
}

func (s CpnWriteRequest2) HasMetadata() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s CpnWriteRequest2) SetMetadata(v CpnWriteRequest2_MetricMetadata2_List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewMetadata sets the metadata field to a newly
// allocated CpnWriteRequest2_MetricMetadata2_List, preferring placement in s's segment.
func (s CpnWriteRequest2) NewMetadata(n int32) (CpnWriteRequest2_MetricMetadata2_List, error) {
	l, err := NewCpnWriteRequest2_MetricMetadata2_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return CpnWriteRequest2_MetricMetadata2_List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s CpnWriteRequest2) SkipLabelNameValidation() bool {
	return capnp.Struct(s).Bit(16)
}

func (s CpnWriteRequest2) SetSkipLabelNameValidation(v bool) {
	capnp.Struct(s).SetBit(16, v)
}

// CpnWriteRequest2_List is a list of CpnWriteRequest2.
type CpnWriteRequest2_List = capnp.StructList[CpnWriteRequest2]

// NewCpnWriteRequest2 creates a new list of CpnWriteRequest2.
func NewCpnWriteRequest2_List(s *capnp.Segment, sz int32) (CpnWriteRequest2_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[CpnWriteRequest2](l), err
}

// CpnWriteRequest2_Future is a wrapper for a CpnWriteRequest2 promised by a client call.
type CpnWriteRequest2_Future struct{ *capnp.Future }

func (f CpnWriteRequest2_Future) Struct() (CpnWriteRequest2, error) {
	p, err := f.Future.Ptr()
	return CpnWriteRequest2(p.Struct()), err
}

type CpnWriteRequest2_Source uint16

// CpnWriteRequest2_Source_TypeID is the unique identifier for the type CpnWriteRequest2_Source.
const CpnWriteRequest2_Source_TypeID = 0xf9e71e6579ef2e82

// Values of CpnWriteRequest2_Source.
const (
	CpnWriteRequest2_Source_api  CpnWriteRequest2_Source = 0
	CpnWriteRequest2_Source_rule CpnWriteRequest2_Source = 1
)

// String returns the enum's constant name.
func (c CpnWriteRequest2_Source) String() string {
	switch c {
	case CpnWriteRequest2_Source_api:
		return "api"
	case CpnWriteRequest2_Source_rule:
		return "rule"

	default:
		return ""
	}
}

// CpnWriteRequest2_SourceFromString returns the enum value with a name,
// or the zero value if there's no such value.
func CpnWriteRequest2_SourceFromString(c string) CpnWriteRequest2_Source {
	switch c {
	case "api":
		return CpnWriteRequest2_Source_api
	case "rule":
		return CpnWriteRequest2_Source_rule

	default:
		return 0
	}
}

type CpnWriteRequest2_Source_List = capnp.EnumList[CpnWriteRequest2_Source]

func NewCpnWriteRequest2_Source_List(s *capnp.Segment, sz int32) (CpnWriteRequest2_Source_List, error) {
	return capnp.NewEnumList[CpnWriteRequest2_Source](s, sz)
}

type CpnWriteRequest2_TimeSeries2 capnp.Struct

// CpnWriteRequest2_TimeSeries2_TypeID is the unique identifier for the type CpnWriteRequest2_TimeSeries2.
const CpnWriteRequest2_TimeSeries2_TypeID = 0xf3a38db41fe1776e

func NewCpnWriteRequest2_TimeSeries2(s *capnp.Segment) (CpnWriteRequest2_TimeSeries2, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return CpnWriteRequest2_TimeSeries2(st), err
}

func NewRootCpnWriteRequest2_TimeSeries2(s *capnp.Segment) (CpnWriteRequest2_TimeSeries2, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return CpnWriteRequest2_TimeSeries2(st), err
}

func ReadRootCpnWriteRequest2_TimeSeries2(msg *capnp.Message) (CpnWriteRequest2_TimeSeries2, error) {
	root, err := msg.Root()
	return CpnWriteRequest2_TimeSeries2(root.Struct()), err
}

func (s CpnWriteRequest2_TimeSeries2) String() string {
	str, _ := text.Marshal(0xf3a38db41fe1776e, capnp.Struct(s))
	return str
}

func (s CpnWriteRequest2_TimeSeries2) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CpnWriteRequest2_TimeSeries2) DecodeFromPtr(p capnp.Ptr) CpnWriteRequest2_TimeSeries2 {
	return CpnWriteRequest2_TimeSeries2(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CpnWriteRequest2_TimeSeries2) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CpnWriteRequest2_TimeSeries2) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CpnWriteRequest2_TimeSeries2) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CpnWriteRequest2_TimeSeries2) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CpnWriteRequest2_TimeSeries2) Labels() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s CpnWriteRequest2_TimeSeries2) HasLabels() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CpnWriteRequest2_TimeSeries2) LabelsBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s CpnWriteRequest2_TimeSeries2) SetLabels(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s CpnWriteRequest2_TimeSeries2) Samples() (CpnWriteRequest2_TimeSeries2_Sample2_List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return CpnWriteRequest2_TimeSeries2_Sample2_List(p.List()), err
}

func (s CpnWriteRequest2_TimeSeries2) HasSamples() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s CpnWriteRequest2_TimeSeries2) SetSamples(v CpnWriteRequest2_TimeSeries2_Sample2_List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewSamples sets the samples field to a newly
// allocated CpnWriteRequest2_TimeSeries2_Sample2_List, preferring placement in s's segment.
func (s CpnWriteRequest2_TimeSeries2) NewSamples(n int32) (CpnWriteRequest2_TimeSeries2_Sample2_List, error) {
	l, err := NewCpnWriteRequest2_TimeSeries2_Sample2_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return CpnWriteRequest2_TimeSeries2_Sample2_List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}

// CpnWriteRequest2_TimeSeries2_List is a list of CpnWriteRequest2_TimeSeries2.
type CpnWriteRequest2_TimeSeries2_List = capnp.StructList[CpnWriteRequest2_TimeSeries2]

// NewCpnWriteRequest2_TimeSeries2 creates a new list of CpnWriteRequest2_TimeSeries2.
func NewCpnWriteRequest2_TimeSeries2_List(s *capnp.Segment, sz int32) (CpnWriteRequest2_TimeSeries2_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[CpnWriteRequest2_TimeSeries2](l), err
}

// CpnWriteRequest2_TimeSeries2_Future is a wrapper for a CpnWriteRequest2_TimeSeries2 promised by a client call.
type CpnWriteRequest2_TimeSeries2_Future struct{ *capnp.Future }

func (f CpnWriteRequest2_TimeSeries2_Future) Struct() (CpnWriteRequest2_TimeSeries2, error) {
	p, err := f.Future.Ptr()
	return CpnWriteRequest2_TimeSeries2(p.Struct()), err
}

type CpnWriteRequest2_TimeSeries2_Sample2 capnp.Struct

// CpnWriteRequest2_TimeSeries2_Sample2_TypeID is the unique identifier for the type CpnWriteRequest2_TimeSeries2_Sample2.
const CpnWriteRequest2_TimeSeries2_Sample2_TypeID = 0x93fe8bb8dc1f1765

func NewCpnWriteRequest2_TimeSeries2_Sample2(s *capnp.Segment) (CpnWriteRequest2_TimeSeries2_Sample2, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return CpnWriteRequest2_TimeSeries2_Sample2(st), err
}

func NewRootCpnWriteRequest2_TimeSeries2_Sample2(s *capnp.Segment) (CpnWriteRequest2_TimeSeries2_Sample2, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return CpnWriteRequest2_TimeSeries2_Sample2(st), err
}

func ReadRootCpnWriteRequest2_TimeSeries2_Sample2(msg *capnp.Message) (CpnWriteRequest2_TimeSeries2_Sample2, error) {
	root, err := msg.Root()
	return CpnWriteRequest2_TimeSeries2_Sample2(root.Struct()), err
}

func (s CpnWriteRequest2_TimeSeries2_Sample2) String() string {
	str, _ := text.Marshal(0x93fe8bb8dc1f1765, capnp.Struct(s))
	return str
}

func (s CpnWriteRequest2_TimeSeries2_Sample2) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CpnWriteRequest2_TimeSeries2_Sample2) DecodeFromPtr(p capnp.Ptr) CpnWriteRequest2_TimeSeries2_Sample2 {
	return CpnWriteRequest2_TimeSeries2_Sample2(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CpnWriteRequest2_TimeSeries2_Sample2) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CpnWriteRequest2_TimeSeries2_Sample2) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CpnWriteRequest2_TimeSeries2_Sample2) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CpnWriteRequest2_TimeSeries2_Sample2) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CpnWriteRequest2_TimeSeries2_Sample2) TimestampMs() int64 {
	return int64(capnp.Struct(s).Uint64(0))
}

func (s CpnWriteRequest2_TimeSeries2_Sample2) SetTimestampMs(v int64) {
	capnp.Struct(s).SetUint64(0, uint64(v))
}

func (s CpnWriteRequest2_TimeSeries2_Sample2) Value() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s CpnWriteRequest2_TimeSeries2_Sample2) SetValue(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

// CpnWriteRequest2_TimeSeries2_Sample2_List is a list of CpnWriteRequest2_TimeSeries2_Sample2.
type CpnWriteRequest2_TimeSeries2_Sample2_List = capnp.StructList[CpnWriteRequest2_TimeSeries2_Sample2]

// NewCpnWriteRequest2_TimeSeries2_Sample2 creates a new list of CpnWriteRequest2_TimeSeries2_Sample2.
func NewCpnWriteRequest2_TimeSeries2_Sample2_List(s *capnp.Segment, sz int32) (CpnWriteRequest2_TimeSeries2_Sample2_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[CpnWriteRequest2_TimeSeries2_Sample2](l), err
}

// CpnWriteRequest2_TimeSeries2_Sample2_Future is a wrapper for a CpnWriteRequest2_TimeSeries2_Sample2 promised by a client call.
type CpnWriteRequest2_TimeSeries2_Sample2_Future struct{ *capnp.Future }

func (f CpnWriteRequest2_TimeSeries2_Sample2_Future) Struct() (CpnWriteRequest2_TimeSeries2_Sample2, error) {
	p, err := f.Future.Ptr()
	return CpnWriteRequest2_TimeSeries2_Sample2(p.Struct()), err
}

type CpnWriteRequest2_MetricMetadata2 capnp.Struct

// CpnWriteRequest2_MetricMetadata2_TypeID is the unique identifier for the type CpnWriteRequest2_MetricMetadata2.
const CpnWriteRequest2_MetricMetadata2_TypeID = 0xe6b3b2e27104cb9c

func NewCpnWriteRequest2_MetricMetadata2(s *capnp.Segment) (CpnWriteRequest2_MetricMetadata2, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return CpnWriteRequest2_MetricMetadata2(st), err
}

func NewRootCpnWriteRequest2_MetricMetadata2(s *capnp.Segment) (CpnWriteRequest2_MetricMetadata2, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return CpnWriteRequest2_MetricMetadata2(st), err
}

func ReadRootCpnWriteRequest2_MetricMetadata2(msg *capnp.Message) (CpnWriteRequest2_MetricMetadata2, error) {
	root, err := msg.Root()
	return CpnWriteRequest2_MetricMetadata2(root.Struct()), err
}

func (s CpnWriteRequest2_MetricMetadata2) String() string {
	str, _ := text.Marshal(0xe6b3b2e27104cb9c, capnp.Struct(s))
	return str
}

func (s CpnWriteRequest2_MetricMetadata2) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CpnWriteRequest2_MetricMetadata2) DecodeFromPtr(p capnp.Ptr) CpnWriteRequest2_MetricMetadata2 {
	return CpnWriteRequest2_MetricMetadata2(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CpnWriteRequest2_MetricMetadata2) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CpnWriteRequest2_MetricMetadata2) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CpnWriteRequest2_MetricMetadata2) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CpnWriteRequest2_MetricMetadata2) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CpnWriteRequest2_MetricMetadata2) Type() CpnWriteRequest2_MetricMetadata2_MetricType2 {
	return CpnWriteRequest2_MetricMetadata2_MetricType2(capnp.Struct(s).Uint16(0))
}

func (s CpnWriteRequest2_MetricMetadata2) SetType(v CpnWriteRequest2_MetricMetadata2_MetricType2) {
	capnp.Struct(s).SetUint16(0, uint16(v))
}

func (s CpnWriteRequest2_MetricMetadata2) MetricFamilyName() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s CpnWriteRequest2_MetricMetadata2) HasMetricFamilyName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CpnWriteRequest2_MetricMetadata2) MetricFamilyNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s CpnWriteRequest2_MetricMetadata2) SetMetricFamilyName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s CpnWriteRequest2_MetricMetadata2) Help() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s CpnWriteRequest2_MetricMetadata2) HasHelp() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s CpnWriteRequest2_MetricMetadata2) HelpBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s CpnWriteRequest2_MetricMetadata2) SetHelp(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s CpnWriteRequest2_MetricMetadata2) Unit() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s CpnWriteRequest2_MetricMetadata2) HasUnit() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s CpnWriteRequest2_MetricMetadata2) UnitBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s CpnWriteRequest2_MetricMetadata2) SetUnit(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

// CpnWriteRequest2_MetricMetadata2_List is a list of CpnWriteRequest2_MetricMetadata2.
type CpnWriteRequest2_MetricMetadata2_List = capnp.StructList[CpnWriteRequest2_MetricMetadata2]

// NewCpnWriteRequest2_MetricMetadata2 creates a new list of CpnWriteRequest2_MetricMetadata2.
func NewCpnWriteRequest2_MetricMetadata2_List(s *capnp.Segment, sz int32) (CpnWriteRequest2_MetricMetadata2_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return capnp.StructList[CpnWriteRequest2_MetricMetadata2](l), err
}

// CpnWriteRequest2_MetricMetadata2_Future is a wrapper for a CpnWriteRequest2_MetricMetadata2 promised by a client call.
type CpnWriteRequest2_MetricMetadata2_Future struct{ *capnp.Future }

func (f CpnWriteRequest2_MetricMetadata2_Future) Struct() (CpnWriteRequest2_MetricMetadata2, error) {
	p, err := f.Future.Ptr()
	return CpnWriteRequest2_MetricMetadata2(p.Struct()), err
}

type CpnWriteRequest2_MetricMetadata2_MetricType2 uint16

// CpnWriteRequest2_MetricMetadata2_MetricType2_TypeID is the unique identifier for the type CpnWriteRequest2_MetricMetadata2_MetricType2.
const CpnWriteRequest2_MetricMetadata2_MetricType2_TypeID = 0x90aba6cbb2ce4069

// Values of CpnWriteRequest2_MetricMetadata2_MetricType2.
const (
	CpnWriteRequest2_MetricMetadata2_MetricType2_unknown        CpnWriteRequest2_MetricMetadata2_MetricType2 = 0
	CpnWriteRequest2_MetricMetadata2_MetricType2_counter        CpnWriteRequest2_MetricMetadata2_MetricType2 = 1
	CpnWriteRequest2_MetricMetadata2_MetricType2_gauge          CpnWriteRequest2_MetricMetadata2_MetricType2 = 2
	CpnWriteRequest2_MetricMetadata2_MetricType2_histogram      CpnWriteRequest2_MetricMetadata2_MetricType2 = 3
	CpnWriteRequest2_MetricMetadata2_MetricType2_gaugehistogram CpnWriteRequest2_MetricMetadata2_MetricType2 = 4
	CpnWriteRequest2_MetricMetadata2_MetricType2_summary        CpnWriteRequest2_MetricMetadata2_MetricType2 = 5
	CpnWriteRequest2_MetricMetadata2_MetricType2_info           CpnWriteRequest2_MetricMetadata2_MetricType2 = 6
	CpnWriteRequest2_MetricMetadata2_MetricType2_stateset       CpnWriteRequest2_MetricMetadata2_MetricType2 = 7
)

// String returns the enum's constant name.
func (c CpnWriteRequest2_MetricMetadata2_MetricType2) String() string {
	switch c {
	case CpnWriteRequest2_MetricMetadata2_MetricType2_unknown:
		return "unknown"
	case CpnWriteRequest2_MetricMetadata2_MetricType2_counter:
		return "counter"
	case CpnWriteRequest2_MetricMetadata2_MetricType2_gauge:
		return "gauge"
	case CpnWriteRequest2_MetricMetadata2_MetricType2_histogram:
		return "histogram"
	case CpnWriteRequest2_MetricMetadata2_MetricType2_gaugehistogram:
		return "gaugehistogram"
	case CpnWriteRequest2_MetricMetadata2_MetricType2_summary:
		return "summary"
	case CpnWriteRequest2_MetricMetadata2_MetricType2_info:
		return "info"
	case CpnWriteRequest2_MetricMetadata2_MetricType2_stateset:
		return "stateset"

	default:
		return ""
	}
}

// CpnWriteRequest2_MetricMetadata2_MetricType2FromString returns the enum value with a name,
// or the zero value if there's no such value.
func CpnWriteRequest2_MetricMetadata2_MetricType2FromString(c string) CpnWriteRequest2_MetricMetadata2_MetricType2 {
	switch c {
	case "unknown":
		return CpnWriteRequest2_MetricMetadata2_MetricType2_unknown
	case "counter":
		return CpnWriteRequest2_MetricMetadata2_MetricType2_counter
	case "gauge":
		return CpnWriteRequest2_MetricMetadata2_MetricType2_gauge
	case "histogram":
		return CpnWriteRequest2_MetricMetadata2_MetricType2_histogram
	case "gaugehistogram":
		return CpnWriteRequest2_MetricMetadata2_MetricType2_gaugehistogram
	case "summary":
		return CpnWriteRequest2_MetricMetadata2_MetricType2_summary
	case "info":
		return CpnWriteRequest2_MetricMetadata2_MetricType2_info
	case "stateset":
		return CpnWriteRequest2_MetricMetadata2_MetricType2_stateset

	default:
		return 0
	}
}

type CpnWriteRequest2_MetricMetadata2_MetricType2_List = capnp.EnumList[CpnWriteRequest2_MetricMetadata2_MetricType2]

func NewCpnWriteRequest2_MetricMetadata2_MetricType2_List(s *capnp.Segment, sz int32) (CpnWriteRequest2_MetricMetadata2_MetricType2_List, error) {
	return capnp.NewEnumList[CpnWriteRequest2_MetricMetadata2_MetricType2](s, sz)
}

const schema_c41513495eab566b = "x\xda\xa4TMh\\U\x14\xfe\xbe{g2\x0dM" +
	"\x9c\\&\x92\x9d\x11q\x91\x06\x9b4\x13\xa5& \xa9" +
	"\xf1\x07\x12\x8c\xf46i\xa5\"\xeaMzM\x9ey\xef" +
	"\xcd\xcb\xfbi\x1c\xa9\x8ct\xe9\x0f\x08\"T\xd0\x85(" +
	"]\xd8]\xb5\xa0\xe0FQD\x0b\xee\x057\x15\xb4\xe8" +
	"\xc6\x85n\xdc\xf8\xe4\xbe\xc9\xcc<\xdc\xd5\xae\x1e\xf7\xbc" +
	"s\xcf\xf9\xbe\xf3}\xf7\x1c\xfb\x82'*s\xa3\xfb\x12" +
	"BOU\x87r\xef\xc4\x0fW\xaf_\xbe\xf2\x16\xd4\x8a" +
	"\xc8\xdf\xbb^\xd9\xfb\xf9\xea'\xbf\x02\x9c\xff\x80\x1f\x8b" +
	"\xc6w\xac\x01\x8do\xf8-\x98\xdb\x89\xc9\x9f>{\xfd" +
	"\x9f\xb7\xa1\x1f\xa3\xc8\xc3\xfd\x1b\x93\x9f\xbe\xf9\xe1\x9f\xa8" +
	"\xd4\x80\xf9\x07\xc4\x8b\xa2qV\xb8\xe4\xd3b\x1f\x1cT" +
	"\xd2\x0bd\xfe\xfb\xc4\xf0\xe5\xf3\x1bo\xfc\x85\xaat\xd9" +
	"\xd7\xc4\xaah\xfc(&\x80\xc6/\xe2&8(\xa6\x16" +
	"\xca\xc9\xae\xde\xfc\x97rZ4nH\x97\xfc\x9bt\xa5" +
	"\xfb\xff\xf5\x14\x99\xef\x9e\xb9\xf2\xecJ\xe3\xce\xaf\x0f\xb2" +
	"OW\xbegc\xafr\x1ch\xbc[q\xa5/\xce\xfc" +
	"\xd1\xb6w\xdd\xfc\x1bjA\x0c\xae\x82\xf3\xefW\x85h" +
	"|^u\x90\xafU\x8f\xe3h\x1e\xedn\xcfz\xe1\xb6" +
	"\x1dNR\x1b\xcfn\xf9\x9e\x0d\xd3\xd9\xfd\xd8K\xeds" +
	"\xb1\xdd\xcbl\x92\xcel\x99(\x8c\x16\x1f\x89\xc2\xa7\\" +
	"\xf8T7\xda\x9cY\xb3i\xecm\xad\xd9\xd4\x9c3\xa9" +
	"\xe9\x9d7\xea\xed\xc86O\x92\xfan\x0a@\x9d]\x06" +
	"H\xa5\xddG\xa8\x95&@\xa9\x1e>\x05\xb0\xa2\x1ez" +
	"\x19`U-\xb8\x7fCjn\x1a`M\x1dY\x05:" +
	"Y\xb8\x1b\xb6\xf6\xc3\xceV+\x0bS\x1bOn\x9bl" +
	"\xdb\xe6;^\x92\xb6\xb6c\x03\x06y\x11\xd9\xf1\x12," +
	"\x15\xa1\xa0\x93dA`\xe2v\xdd\x0b_h\xe5Ij" +
	"R\x9b\xd8\x14@\x9f\xe1\xa1[f\xb8\xe1\x05v\xdd\xc6" +
	"\x9eM\x9a3\xeb&\xa8G~\x97\xd9!Y\x01*\x04" +
	"\xd4\x91M@OI\xea\xfb\x05\x159N\x17\x9ck\x02" +
	"\xfa>I\xfd\xa0`\x9ez\x81MR\x13\xa0\x16\xad%" +
	"\xacB\xb0\x0aN\x9e7~fy\x18\x82\x87\xc1\xdb@" +
	"\xf8\x1f\x0d\x00]!K\xee\xe6f~ K\x1b\xb5\xc8" +
	"6\xf5X\x1f\xba\x99\x06\xf43\x92zG\xb0\x87\xdc\xbe" +
	"\x06\xe8\x1dI\x9d\x0a*\xc1\xf1B\xc1=\x97\xe8K\xea" +
	"\x97\x04\x95\x14\xe3\x94\x80\xca\\0\x92\xd4\x17\x04\xebi" +
	";\xb2\xac\x0f\xda\x82\xac\x83yPt~\xdc0\xf0\xfc" +
	"\xf6\x93&\xb0\x00G 8\x02\xd6w\xac\x1f\xf5\x0fY" +
	"\xe8\xa5\xbdC\x7f\x18\xb5\xff+W\xdd\xe9U\xcc\xa1\xff" +
	"v\x15\x97;\xeb&p\xfa\x95\xc5[\x04\xf4\xbd\x92\xfa" +
	"XI\xbc\xa3\xcb\x07\x8a>*\xb8\xe4\x9bM\xeb'=" +
	"h\x9d\xa4(\x91\xf0\x0e\xf0\xa4$\xc7\x06\x0d@\x17\xec" +
	"c\x1f\xbaU\xec\x80\x1ea\xf9\xd9\xaa\xc5\xd2z\x18\xdd" +
	"\x1cl\x165zqi\xbd\x95\xc5[6\xef\xd9\x135" +
	"\x9b4\xf3\x9e\x15\xd8\xf3BY\xeb\xa7\x01\xfd|W\xad" +
	"\x1e\xd1\xb6c\x9fJ\xeaWKZ\xbf\xb2\x0a\xe8\x0b\x92" +
	"\xfa\x92\xd3z\xac\xab\xf5;_\x01\xfa\x92\xa4\xfe\xa8\xe7" +
	"g\xd7T\x96\x07\xd1\xc7\xda\x1d\xc4RR d}\xc0" +
	"h\xe0\x89\x02\x1e\x80\xc1\xed\xd2\x02.\xc6\x98\xecz\xd1" +
	"\x13f\xd3\x0a\xdf\xb9\xe6\x8c\xf1\xbds&\xf5Z!H" +
	"\x08\xf2\xb6L\xd2\x9d\x1d\x8ag\\PV\xf7\x14\x0bj" +
	"x\x1a\xa8\x99\xc8\xab\xc7\x99o\xff\x0d\x00\x00\xff\xff\x81" +
	"'\xce\xce"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_c41513495eab566b,
		Nodes: []uint64{
			0x90aba6cbb2ce4069,
			0x93fe8bb8dc1f1765,
			0xe6b3b2e27104cb9c,
			0xf3a38db41fe1776e,
			0xf48c5476a60917ea,
			0xf9e71e6579ef2e82,
		},
		Compressed: true,
	})
}
